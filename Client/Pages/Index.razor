@page "/"
@inject NavigationManager NavigationManager
@inject IAreaService AreaService


<PageTitle>Restricted Areas Overview</PageTitle>

@* <div class="wrapper"> *@
@* 		<div class="main"> *@
			

			<main class="content">
				<div class="container-fluid p-0">
					<div class="d-flex justify-content-between align-items-center">
						<h3 class="display-6 mb-3"><span class="text-black-50">Restricted Areas</span> Dashboard</h3>
						<a href="/manage-restricted-areas" class="btn btn-primary"><i class="bi bi-map me-2 mt-1"></i>Restricted Areas</a>
					</div>

					<div class="row">
						<div class="col-xl-2 d-flex">
							<div class="w-100">
								<div class="row">
									<div class="col-xl-12">
										<div class="row">
											<div class="col-6 col-xl-12">
												<div class="card">
													<div class="card-body">
														<div class="row">
															<div class="col mt-0">
																<h5 class="card-title">Total Areas</h5>
															</div>

															<div class="col-auto">
																<div class="stat text-primary">
																	<i class="bi bi-geo-alt-fill"></i>
																</div>
															</div>
														</div>
														<h1 class="mt-1 mb-3">5</h1>
													</div>
												</div>
											</div>
											<div class="col-6 col-xl-12">
												<div class="card">
													<div class="card-body">
														<div class="row">
															<div class="col mt-0">
																<h5 class="card-title">Categories</h5>
															</div>

															<div class="col-auto">
																<div class="stat text-primary d-none d-md-block">
																	<i class="bi bi-list-task"></i>
																</div>
															</div>
														</div>
														<div class="mb-0">
															<span class="text-muted">Residential</span><br/>
															<span class="text-muted">School</span><br/>
															<span class="text-muted">Commercial</span><br/>
															<span class="text-muted">Industrial</span>
														</div>
													</div>
												</div>
											</div>
										</div>
									</div>
								</div>
							</div>
						</div>

						<div class="col-xl-10">
							<div class="card rounded-4 flex-fill w-100">
								<div class="card-header">
									<h5 class="card-title mb-0">Restricted Areas Map</h5>
								</div>
								<div class="card-body py-1">
									<div class="">
										<MapView Longitude="_longitude" Latitude="_latitude" Zoom="16" @ref="_view" Class="map-view"
										         OnClick="OnMapClick" EventRateLimitInMilliseconds="500" Style="height: 800px; width: 100%;">
											<Map>
												<Basemap>
													<PortalItem Id="716b600dbbac433faa4bec9220c76b3a"/>
												</Basemap>


												<GraphicsLayer @ref="_graphicsLayer">
													@if (AreaService.Objects is not null)
													{
														@foreach (var map in AreaService.Objects)
														{
															<Graphic @ref="_polygonGraphic" Attributes="_graphicAttributes">
																<Polygon Rings="@(new[] { map.MapPath })"/>
																<SimpleFillSymbol Color="@(new MapColor(81, 46, 132, 0.8))">
																	<Outline Color="@(new MapColor(255, 255, 255))" Width="1"/>
																</SimpleFillSymbol>
																<PopupTemplate
																	Title="@map?.Name"
																	StringContent="@map.HtmlString()">
																	<ActionButton Image="_content/dymaptic.GeoBlazor.Core.Sample.Shared/images/Measure_Distance16.png"
																	              Title="See Full details"
																	              Id="Search these Details"
																	              CallbackFunction="GoToDetails"/>
																</PopupTemplate>


															</Graphic>
														}
													}
												</GraphicsLayer>

											</Map>
										</MapView>
									</div>
								</div>
							</div>
						</div>
					</div>
				</div>
			</main>

@code {
    protected override async void OnInitialized()
    {
        await AreaService.Get();
        StateHasChanged();
    }

    private readonly Dictionary<string, object> _graphicAttributes = new()
    {
        { "Name", "Sample Polygon" },
        { "Description", "This is where you can describe the polygon." }
    };

	private static double _latitude = -12.796364387850875;
	private static double _longitude = 28.23696449229915;
    // private  double _latitude2 = _latitude;
    // private  double _longitude2 = _longitude;

    // private Root? _root = new();
    private bool _showPointSection;
    private bool _showLineSection;
    private bool _showPolygonSection;
    private GraphicsLayer? _graphicsLayer;
    private Graphic? _polygonGraphic;
    private Graphic? _pointGraphic;
    private Graphic? _polylineGraphic;
    Point mapPoint = new Point(-118.805, 34.027);
    RestrictedArea? land;
    // Dispute dispute = new();



    private async Task OnMapClick(ClickEvent clickEvent)
    {
        ScreenPoint screenPoint = await _view!.ToScreen(clickEvent.MapPoint);
        mapPoint = await _view.ToMap(screenPoint);
        Console.WriteLine($"latitude: {mapPoint.Latitude}, longitude: {mapPoint.Longitude}");
        var coordinate = new Coordinate(mapPoint.Latitude, mapPoint.Longitude);

        foreach (var point in AreaService.Objects)
        {
            if (Geometrics.IsInside(coordinate, point.Perimeter))
            {
                land = point;
                return;
            }
        }
        StateHasChanged();

    }



    List<Coordinate> mapPoints = new();
    Coordinate newCoordinated = new();



    private MapView? _view;


    private async Task GoToDetails() 

    {
  
        await Task.Delay(1);
        NavigationManager.NavigateTo($"/LandDetails/{land?.Id}");
    }

}
