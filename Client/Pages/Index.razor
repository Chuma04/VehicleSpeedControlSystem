@page "/"


@inject NavigationManager NavigationManager
@inject IAreaService AreaService


<PageTitle>Search RestrictedArea</PageTitle>

<div class="row">

<div class="col-12">
     <div class="row">
          <div class="col-md-12">
               <h1>Search for RestrictedArea Details</h1>
               <form>
@*                     <div class="form-group">
                         <label for="coordinates">RestrictedArea
                              coordinates(Click on the map to check the details of the restrictedArea)</label>
                         <div class="input-group">
                              <input type="number" aria-label="First name" class="form-control" @bind="@newCoordinated.Latitude">
                              <input type="number" aria-label="Last name" class="form-control" @bind="@newCoordinated.Longitude">
                              <input type="text" aria-label="Last name" class="form-control" placeholder="RestrictedArea Id/Plot number ">
                         </div>
                    </div> *@
                    <!-- Add more filters as needed -->
                    @if(land is not null)
                    {
                    <button type="button" class="btn btn-outline-success col-12 my-1" @onclick="GoToDetails">Search</button>

                    }
               </form>

          </div>
     </div>

</div>
<div class="col-12">
     <div class="col-12">
          <MapView Longitude="_longitude" Latitude="_latitude" Zoom="16" @ref="_view" Class="map-view"
                   OnClick="OnMapClick" EventRateLimitInMilliseconds="500" Style="height: 800px; width: 100%;">
               <Map>
                    <Basemap>
                         <PortalItem Id="716b600dbbac433faa4bec9220c76b3a"/>
                    </Basemap>


                    <GraphicsLayer @ref="_graphicsLayer">
                         @if (AreaService.Objects is not null)
                         {
                            @foreach (var map in AreaService.Objects)
                              {
                                   <Graphic @ref="_polygonGraphic" Attributes="_graphicAttributes">
                                    <Polygon Rings="@(new[] { map.MapPath })" />
                                        <SimpleFillSymbol Color="@(new MapColor(81, 46, 132, 0.8))">
                                             <Outline Color="@(new MapColor(255, 255, 255))" Width="1"/>
                                        </SimpleFillSymbol>
                                     <PopupTemplate 
                                        Title="@map?.Name"
                                        StringContent="@map.HtmlString()">
                                        <ActionButton Image="_content/dymaptic.GeoBlazor.Core.Sample.Shared/images/Measure_Distance16.png"
                                                      Title="See Full details"
                                                      Id="Search these Details"
                                                      CallbackFunction="GoToDetails" />
                                    </PopupTemplate>
                                   
 
                                </Graphic>
                              }
                         }
                    </GraphicsLayer>

               </Map>
          </MapView>

     </div>


    </div>
</div>

@code {
    // protected override async Task OnAfterRenderAsync(bool firstRender)
    // {
    //      if (firstRender)
    //      {
    //           await _view!.GoTo(new MapPoint(-118.805, 34.027), 11);
    //      }
    // }

    protected override async void OnInitialized()
    {
        await AreaService.Get();
        StateHasChanged();
    }

    private readonly Dictionary<string, object> _graphicAttributes = new()
    {
        { "Name", "Sample Polygon" },
        { "Description", "This is where you can describe the polygon." }
    };

	private static double _latitude = -12.796364387850875;
	private static double _longitude = 28.23696449229915;
    private  double _latitude2 = _latitude;
    private  double _longitude2 = _longitude;

    // private Root? _root = new();
    private bool _showPointSection;
    private bool _showLineSection;
    private bool _showPolygonSection;
    private GraphicsLayer? _graphicsLayer;
    private Graphic? _polygonGraphic;
    private Graphic? _pointGraphic;
    private Graphic? _polylineGraphic;
    Point mapPoint = new Point(-118.805, 34.027);
    RestrictedArea? land;
    // Dispute dispute = new();



    private async Task OnMapClick(ClickEvent clickEvent)
    {
        ScreenPoint screenPoint = await _view!.ToScreen(clickEvent.MapPoint);
        mapPoint = await _view.ToMap(screenPoint);
        Console.WriteLine($"latitude: {mapPoint.Latitude}, longitude: {mapPoint.Longitude}");
        var coordinate = new Coordinate(mapPoint.Latitude, mapPoint.Longitude);

        foreach (var point in AreaService.Objects)
        {
            if (Geometrics.IsInside(coordinate, point.Perimeter))
            {
                land = point;
                return;
            }
        }
        StateHasChanged();

    }



    List<Coordinate> mapPoints = new();
    Coordinate newCoordinated = new();



    private MapView? _view;


    private async Task GoToDetails() 

    {
  
        await Task.Delay(1);
        NavigationManager.NavigateTo($"/LandDetails/{land?.Id}");
    }

}
